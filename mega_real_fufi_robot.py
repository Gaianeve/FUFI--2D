# -*- coding: utf-8 -*-
"""Mega_Real_Fufi_Robot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1siOJ0VQeiyZERbWC4XzPDAJrT9lF_5BA

# 3D Cartpole Robot 🤖 🐬
In this colab i put up a simulated 3D cartpole. The cart can slide freely on the ground plane without any friction; the pole is free to rotate in the plane above the cart.

##Burocrazia 🔖 🐧
1. ⚙ ⚙ Installing `pybullet`
2. 📡 setting uo the connection with the engine

  🛑 *Colab does not support the `p.GUI` mode, so the only option is `p.DIRECT`: no big deal, u just can render the thing in real time*

3. 🌐 Setting up the ground plane
"""

!pip install pybullet

import pybullet as p
import pybullet_data
import numpy as np

# Connect to PyBullet
p.connect(p.DIRECT)

# Set additional search path for PyBullet
p.setAdditionalSearchPath(pybullet_data.getDataPath())

# Load a plane for the simulation
p.loadURDF("plane.urdf")

"""## Oggettini 🪄 🐏
Declaring parameters for the object that i want and creating them in the space i just set up. The parameters are that of the standard cartole problem.

🦘 🕋   Declaring a *cart*: a box of shape `[x,y,z] =  [0.5, 0.5, 0.2]`. I put
        it just above the ground plane 🛸 so that we can ignore the friction.
🐘 🪐   Declaring a *pole* attached to the cart: a cilynder of shape `[x,y,z]  
        =  [0.5, 0.5, 0.1]`

"""

# Define cartpole parameters
mass = 1
cart_size = [0.5, 0.5, 0.2]
pole_size = [0.05, 0.05, 1.0]
cart_position = [0, 0, 0.1]  # Slightly above the ground
# Inertia (identity for simplicity)
inertia = [1, 1, 1]

# Create the cart (base)
cart_collision_shape = p.createCollisionShape(p.GEOM_BOX, halfExtents=[s / 2 for s in cart_size])
cart_visual_shape = p.createVisualShape(p.GEOM_BOX, halfExtents=[s / 2 for s in cart_size], rgbaColor=[0, 1, 1, 1])

cart_id = p.createMultiBody(
    baseMass=mass,
    baseCollisionShapeIndex=cart_collision_shape,
    baseVisualShapeIndex=cart_visual_shape,
    basePosition=cart_position,
    baseInertialFramePosition=[0, 0, 0],
)

# Create the pole (link) that will rotate
pole_collision_shape = p.createCollisionShape(p.GEOM_BOX, halfExtents=[s / 2 for s in pole_size])
pole_visual_shape = p.createVisualShape(p.GEOM_BOX, halfExtents=[s / 2 for s in pole_size], rgbaColor=[1, 0.5, 0, 1])

"""## Giunti ⚙ 🏯 🦊
Add joints between the cart and the pole. The pole can rotate in a plane and not just on one axis, so we have to declare a spherical joint.
"""

# Add revolute joint for X-axis rotation
joint_1_x = p.createMultiBody(
    baseMass=0,  # Joint doesn't need mass
    baseInertialFramePosition=[0, 0, 0],
    linkMasses=[0.1],  # One element for one link
    linkCollisionShapeIndices=[pole_collision_shape],  # One element for one link
    linkVisualShapeIndices=[pole_visual_shape],  # One element for one link
    linkPositions=[[0, 0, pole_size[2] / 2]],  # One element for one link
    linkOrientations=[[0, 0, 0, 1]],  # One element for one link
    linkInertialFramePositions=[[0, 0, 0]],  # One element for one link
    linkInertialFrameOrientations=[[0, 0, 0, 1]],  # One element for one link
    linkParentIndices=[0],  # One element for one link
    linkJointTypes=[p.JOINT_REVOLUTE],  # One element for one link
    linkJointAxis=[[1, 0, 0]],  # One element for one link
    basePosition=cart_position,  # Base position of the cart
)

# Add revolute joint for Y-axis rotation
joint_2_y = p.createMultiBody(
    baseMass=0,  # Joint doesn't need mass
    baseInertialFramePosition=[0, 0, 0],
    linkMasses=[0.1],  # One element for one link
    linkCollisionShapeIndices=[pole_collision_shape],  # One element for one link
    linkVisualShapeIndices=[pole_visual_shape],  # One element for one link
    linkPositions=[[0, 0, pole_size[2] / 2]],  # One element for one link
    linkOrientations=[[0, 0, 0, 1]],  # One element for one link
    linkInertialFramePositions=[[0, 0, 0]],  # One element for one link
    linkInertialFrameOrientations=[[0, 0, 0, 1]],  # One element for one link
    linkParentIndices=[0],  # One element for one link
    linkJointTypes=[p.JOINT_REVOLUTE],  # One element for one link
    linkJointAxis=[[0, 1, 0]],  # One element for one link (Y-axis rotation)
    basePosition=cart_position,  # Base position of the cart
)

"""## Closing thing up
Adding gravity 🍎 🔮 and closing things up
"""

# Set gravity for the simulation
p.setGravity(0, 0, -9.81)

# Run the simulation
for _ in range(10000):
    p.stepSimulation()

# Disconnect from PyBullet
p.disconnect()

